#include "relay_manager.h"
#include <iostream>
#include <thread>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <unistd.h>
#include <cstring>
#include <csignal>
#include <atomic>

using namespace RemoteAccessSystem::RelayServer;

std::atomic<bool> running(true);
RelayManager* relay_manager = nullptr;

void signalHandler(int signal) {
    std::cout << "\n[RelayServer] Shutting down..." << std::endl;
    running = false;
}

void handleClient(int client_fd, RelayManager* manager) {
    char buffer[1024];
    
    ssize_t bytes = recv(client_fd, buffer, sizeof(buffer) - 1, 0);
    if (bytes > 0) {
        buffer[bytes] = '\0';
        std::string data(buffer);
        std::cout << "[RelayServer] Received: " << data << std::endl;
        
        if (data.find("GET_PCS") == 0) {
            auto pc_list = manager->getPCList();
            std::string response = "PC_LIST|";
            
            for (const auto& pc : pc_list) {
                response += pc.pc_id + "," + pc.username + "," + pc.pc_name + ";";
            }
            response += "\n";
            
            send(client_fd, response.c_str(), response.length(), 0);
        }
    }
    
    close(client_fd);
}

int main() {
    signal(SIGINT, signalHandler);
    signal(SIGTERM, signalHandler);
    
    std::cout << "========================================" << std::endl;
    std::cout << "  Relay Server v1.0" << std::endl;
    std::cout << "========================================" << std::endl;
    
    relay_manager = new RelayManager();
    
    int server_fd = socket(AF_INET, SOCK_STREAM, 0);
    if (server_fd < 0) {
        std::cerr << "[RelayServer] Failed to create socket" << std::endl;
        return 1;
    }
    
    int opt = 1;
    setsockopt(server_fd, SOL_SOCKET, SO_REUSEADDR, &opt, sizeof(opt));
    
    struct sockaddr_in address;
    address.sin_family = AF_INET;
    address.sin_addr.s_addr = INADDR_ANY;
    address.sin_port = htons(2810);
    
    if (bind(server_fd, (struct sockaddr*)&address, sizeof(address)) < 0) {
        std::cerr << "[RelayServer] Bind failed" << std::endl;
        close(server_fd);
        return 1;
    }
    
    if (listen(server_fd, 5) < 0) {
        std::cerr << "[RelayServer] Listen failed" << std::endl;
        close(server_fd);
        return 1;
    }
    
    std::cout << "[RelayServer] Listening on port 2810" << std::endl;
    
    while (running) {
        struct sockaddr_in client_addr;
        socklen_t client_len = sizeof(client_addr);
        
        int client_fd = accept(server_fd, (struct sockaddr*)&client_addr, &client_len);
        if (client_fd < 0) {
            if (running) continue;
            else break;
        }
        
        std::thread(&handleClient, client_fd, relay_manager).detach();
    }
    
    close(server_fd);
    delete relay_manager;
    
    std::cout << "[RelayServer] Shutdown complete" << std::endl;
    return 0;
}
