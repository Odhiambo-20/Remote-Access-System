#include <iostream>
#include <thread>
#include <mutex>
#include <map>
#include <vector>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <unistd.h>
#include <cstring>
#include <csignal>
#include <atomic>

std::atomic<bool> running(true);

struct PCInfo {
    std::string pc_id;
    std::string usb_id;
    std::string username;
    time_t last_heartbeat;
};

std::map<std::string, PCInfo> connected_pcs;
std::mutex pc_mutex;

std::vector<std::string> split(const std::string& str, char delimiter) {
    std::vector<std::string> parts;
    size_t start = 0;
    size_t end = str.find(delimiter);
    
    while (end != std::string::npos) {
        parts.push_back(str.substr(start, end - start));
        start = end + 1;
        end = str.find(delimiter, start);
    }
    
    parts.push_back(str.substr(start));
    return parts;
}

void handleClient(int client_fd) {
    char buffer[1024];
    ssize_t bytes = recv(client_fd, buffer, sizeof(buffer) - 1, 0);
    if (bytes > 0) {
        buffer[bytes] = '\0';
        std::string message(buffer);
        if (!message.empty() && message.back() == '\n') message.pop_back();
        
        std::cout << "[RelayServer] Received: " << message << std::endl;
        
        if (message.find("REGISTER|") == 0) {
            auto parts = split(message, '|');
            if (parts.size() >= 4) {
                PCInfo info{parts[1], parts[2], parts[3], time(nullptr)};
                {
                    std::lock_guard<std::mutex> lock(pc_mutex);
                    connected_pcs[parts[1]] = info;
                }
                std::string response = "OK|REGISTERED\n";
                send(client_fd, response.c_str(), response.length(), 0);
                std::cout << "[RelayServer] PC registered: " << parts[1] << " (" << parts[3] << ")" << std::endl;
            } else {
                send(client_fd, "ERROR|Invalid REGISTER format\n", 33, 0);
            }
        }
        else if (message.find("GET_PCS") == 0) {
            std::string response = "PC_LIST|";
            {
                std::lock_guard<std::mutex> lock(pc_mutex);
                for (const auto& pc : connected_pcs) {
                    response += pc.second.pc_id + "," + pc.second.username + "," + pc.second.pc_id + ";";
                }
            }
            response += "\n";
            send(client_fd, response.c_str(), response.length(), 0);
        }
    }
    close(client_fd);
}

void signalHandler(int signal) {
    std::cout << "\n[RelayServer] Shutting down..." << std::endl;
    running = false;
}

int main() {
    signal(SIGINT, signalHandler);
    signal(SIGTERM, signalHandler);
    
    std::cout << "========================================" << std::endl;
    std::cout << "  Relay Server v1.0" << std::endl;
    std::cout << "========================================" << std::endl;
    
    int server_fd = socket(AF_INET, SOCK_STREAM, 0);
    if (server_fd < 0) {
        std::cerr << "[RelayServer] Failed to create socket" << std::endl;
        return 1;
    }
    
    int opt = 1;
    setsockopt(server_fd, SOL_SOCKET, SO_REUSEADDR, &opt, sizeof(opt));
    
    struct sockaddr_in address;
    address.sin_family = AF_INET;
    address.sin_addr.s_addr = INADDR_ANY;
    address.sin_port = htons(2810);
    
    if (bind(server_fd, (struct sockaddr*)&address, sizeof(address)) < 0) {
        std::cerr << "[RelayServer] Bind failed" << std::endl;
        close(server_fd);
        return 1;
    }
    
    if (listen(server_fd, 5) < 0) {
        std::cerr << "[RelayServer] Listen failed" << std::endl;
        close(server_fd);
        return 1;
    }
    
    std::cout << "[RelayServer] Listening on port 2810" << std::endl;
    
    while (running) {
        struct sockaddr_in client_addr;
        socklen_t client_len = sizeof(client_addr);
        int client_fd = accept(server_fd, (struct sockaddr*)&client_addr, &client_len);
        if (client_fd < 0) {
            if (running) continue;
            else break;
        }
        std::cout << "[RelayServer] New client connected" << std::endl;
        std::thread(&handleClient, client_fd).detach();
    }
    
    close(server_fd);
    std::cout << "[RelayServer] Shutdown complete" << std::endl;
    return 0;
}
